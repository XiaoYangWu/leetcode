/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]
*/


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
           
	     List<List<Integer>> rs=new ArrayList<List<Integer>>();
	     if(root==null)
	    	 return rs;
	     List<Integer> tem=new ArrayList<Integer>();
		 Deque<TreeNode> dq=new ArrayDeque<TreeNode>();
		 dq.add(root);
		 TreeNode flag=root;
		 
		 while(!dq.isEmpty()){
			 TreeNode tr=dq.pop();
			 tem.add(tr.val);
			 if(tr.left!=null)
				 dq.add(tr.left);
			 if(tr.right!=null)
				 dq.add(tr.right);
			 if(tr==flag){
				 rs.add(tem);
				 tem=new ArrayList<Integer>();
				  flag=dq.peekLast();
			 }
		 }
		 return rs;
    }
}
