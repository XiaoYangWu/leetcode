/*
 Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3. 
*/

//time:O(S.length*T.length) ,space:O(T.length),DP
public class Solution {
    public int numDistinct(String S, String T) {
        int n1=S.length();
        int n2=T.length();
        if(n2>n1)
            return 0;
        if(n1==n2){
            if(S.equals(T))
               return 1;
            return 0;
        }
        int[] rs=new int[n2+1];
        rs[n2]=1;
        for(int i=n1-1;i>=0;i--)
           for(int j=0;j<n2;j++)
           {
                if((n1-i)<(n2-j))
                  rs[j]=0;
                else if((n1-i)==(n2-j))
                {
                 if(S.substring(i).equals(T.substring(j)))
                    rs[j]=1;
                 else
                   rs[j]=0;
                } 
                else if(S.charAt(i)==T.charAt(j)){
                  rs[j]=rs[j+1]+rs[j]; 
                }
            }
        return rs[0];
    }
}
