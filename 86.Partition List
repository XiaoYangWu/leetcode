/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null)
            return head;
        ListNode min=null,max=null,minTail=null,maxTail=null;   
        while(head!=null){
            if(head.val<x){
                if(min==null){
                    min=head;
                    minTail=min;
                }
                else{
                    minTail.next=head;
                    minTail=head;
                }
            }
            else{
                if(max==null){
                    max=head;
                    maxTail=max;
                }
                else{
                    maxTail.next=head;
                    maxTail=head;
                }
            }
            head=head.next;
        }
        if(min==null)
            return max;
        minTail.next=max;
        if(max!=null)
            maxTail.next=null;
        return min;
        
        
        
        
    }
}
