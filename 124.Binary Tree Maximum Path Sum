/*
 Given a binary tree, find the maximum path sum.

The path may start and end at any node in the tree.

For example:
Given the below binary tree,

       1
      / \
     2   3

Return 6. 
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int max=Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
      recur(root);
      return max;
        
    }
    public int recur(TreeNode root){
         if(root==null)
           return 0;
        int left=recur(root.left);
        int right=recur(root.right);
        if(left<0&&right<0)
        {
            if(max<root.val)
                max=root.val;
            return root.val;
        }
        left+=root.val;
        right+=root.val;
        int through=left+right-root.val;
        int rs1=Math.max(left,right);
        int rs2=Math.max(rs1,through);
        if(rs2>max)
           max=rs2;
        return rs1;
    }
}
