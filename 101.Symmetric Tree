/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following is not:

    1
   / \
  2   2
   \   \
   3    3

*/


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public boolean isSymmetric(TreeNode root) {
         if(root==null)
	        	return true;
	    	TreeNode p1=root.left;
	        TreeNode p2=root.right;
	        
	     
	        
	        Stack<TreeNode> st1=new Stack<TreeNode>();
	        Stack<TreeNode> st2=new Stack<TreeNode>();
	        while(p1!=null||p2!=null||!st1.empty()){
	        	if(p1!=null||p2!=null){
	        		if(p2==null||p1==null)
	        			return false;
	        		if(p1.val!=p2.val)
	        			return false;
	        		st1.add(p1);
	        		st2.add(p2);
	        		p1=p1.left;
	        		p2=p2.right;
	        	}
	        	else{
	        		
	        		if(st2.empty())
	        			return false;
	        		p1=st1.pop();
	        		p2=st2.pop();
	        		p1=p1.right;
	        		p2=p2.left;
	        	}
	        }
	       
	    	return true;
    }
}
