/*
 Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut. 
*/

public class Solution {
    public int minCut(String s) {
        int n=s.length();
        int[] dp=new int[n];
        boolean[][] flag=new boolean[n][n];
        for(int i=0;i<n;i++)
        {
            dp[i]=Integer.MAX_VALUE;
            flag[i][i]=true;
        }
        dp[n-1]=0;
        
        for(int i=n-2;i>=0;i--)
           for(int j=i;j<n;j++){
               if(s.charAt(i)==s.charAt(j)&&(j-i+1<=2||flag[i+1][j-1])){
                   flag[i][j]=true;
                   if(j==n-1)
                      dp[i]=0;
                   else
                      dp[i]=Math.min(dp[i],dp[j+1]+1);
               }
           }
         return dp[0];
    }
    
 
}
