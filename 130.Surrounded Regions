/*
 Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,

X X X X
X O O X
X X O X
X O X X

After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/

public class Solution {
    	 public static void solve(char[][] board) {
	        int n=board.length;
	        if(n==0)
	            return;
	        int m=board[0].length;
	        if(m==0)
	            return;
	        boolean[][] flag=new boolean[n][m];
	        for(int i=0;i<n;i++)
	           for(int j=0;j<m;j++)
	               flag[i][j]=true;
	        for(int i=0;i<m;i++)
	            if(board[0][i]=='O'&&flag[0][i])
	               bfs(board,0,i,flag);
	         for(int i=0;i<m;i++)
	            if(board[n-1][i]=='O'&&flag[n-1][i])
	               bfs(board,n-1,i,flag);
	         for(int i=1;i<n-1;i++)
	            if(board[i][0]=='O'&&flag[i][0])
	               bfs(board,i,0,flag);
	        for(int i=1;i<n-1;i++)
	           if(board[i][m-1]=='O'&&flag[i][m-1])
	              bfs(board,i,m-1,flag);
	        for(int i=0;i<n;i++)
	          for(int j=0;j<m;j++)
	              if(board[i][j]=='O'&&flag[i][j])
	                  board[i][j]='X';
	          
	          
	    }
	    public static void bfs(char[][] board,int row,int col,boolean[][] flag){
	        Queue<Integer> rowPos=new LinkedList<Integer>();
	        Queue<Integer> colPos=new LinkedList<Integer>();
	        rowPos.offer(row);
	        colPos.offer(col);
	        flag[row][col]=false;
	        while(!rowPos.isEmpty()){
	            int tRow=rowPos.poll();
	            int tCol=colPos.poll();
	            if(check(board,tRow-1,tCol)&&board[tRow-1][tCol]=='O'&&flag[tRow-1][tCol])
	            {
	                rowPos.offer(tRow-1);
	                colPos.offer(tCol);
	                 flag[tRow-1][tCol]=false;
	            }
	            if(check(board,tRow+1,tCol)&&board[tRow+1][tCol]=='O'&&flag[tRow+1][tCol])
	            {
	                rowPos.offer(tRow+1);
	                colPos.offer(tCol);
	                 flag[tRow+1][tCol]=false;
	            }
	            if(check(board,tRow,tCol-1)&&board[tRow][tCol-1]=='O'&&flag[tRow][tCol-1])
	            {
	                rowPos.offer(tRow);
	                colPos.offer(tCol-1);
	                 flag[tRow][tCol-1]=false;
	            }
	            if(check(board,tRow,tCol+1)&&board[tRow][tCol+1]=='O'&&flag[tRow][tCol+1])
	            {
	                rowPos.offer(tRow);
	                colPos.offer(tCol+1);
	                 flag[tRow][tCol+1]=false;
	            }
	        }
	    }
	    public static boolean check(char[][] board,int row,int col){
	        int n=board.length;
	        int m=board[0].length;
	        if(row<0||col<0)
	           return false;
	        if(row>=n||col>=m)
	           return false;
	        return true;
	    }
}
