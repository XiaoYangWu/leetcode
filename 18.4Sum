/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

    Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
    The solution set must not contain duplicate quadruplets.

    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

*/

public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {
        HashSet<String> hm=new HashSet<String>();
        List<List<Integer>> rs=new ArrayList<List<Integer>>();
        Arrays.sort(num);
        int n=num.length;
        for(int i=0;i<n;i++)
           for(int j=i+1;j<n;j++){
               int sum=target;
               sum-=num[i];
               sum-=num[j];
               if(num[j]+num[j]>sum)
                 break;
               int start=j+1;
               int end=n-1;
               while(start<end){
                   if(start==i||start==j)
                    {
                        start++;
                        continue;
                    }
                   if(end==i||end==j)
                   {
                       end--;
                       continue;
                   }
                   if(num[start]+num[end]<sum)
                      start++;
                   else if(num[start]+num[end]>sum)
                      end--;
                   else{
                       String key=num[i]+"+"+num[j]+"+"+num[start]+"+"+num[end];
                       if(!hm.contains(key)){
                           hm.add(key);
                          List<Integer> tem=new ArrayList<Integer>();
                          tem.add(num[i]);
                          tem.add(num[j]);
                          tem.add(num[start]);
                          tem.add(num[end]);
                          rs.add(tem);
                       }
                       start++;
                       end--;
                   }
               }
           }
           return rs;
    }
}
