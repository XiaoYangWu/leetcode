/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18]. 

*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
       if(intervals.size()==0||intervals.size()==1)
           return intervals;
        sort(intervals,0,intervals.size()-1);
        List<Interval> rs=new ArrayList<Interval>();
        int start=intervals.get(0).start;
        int end=intervals.get(0).end;
        for(Interval tem:intervals){
            if(tem.start<=end){
                if(tem.end>end)
                    end=tem.end;
            }else{
                rs.add(new Interval(start,end));
                start=tem.start;
                end=tem.end;
            }
        }
        rs.add(new Interval(start,end));
        return rs;
    }
    public void sort(List<Interval> intervals,int start,int end){
        if(start>end)
           return;
        int index=partion(intervals,start,end);
        if(start<index-1)
           sort(intervals,start,index-1);
        if(end>index)
           sort(intervals,index,end);
    }
    public int partion(List<Interval> intervals,int start,int end){
        int mid=start+(end-start)/2;
        Interval tem=intervals.get(mid);
        while(start<=end){
            while(intervals.get(start).start<tem.start)
               start++;
            while(intervals.get(end).start>tem.start)
               end--;
            if(start<=end)
            {
                swap(intervals,start,end);
                start++;
                end--;
            }
        }
        return start;
    }
    public void swap(List<Interval> intervals,int start,int end){
        Interval tem=intervals.get(start);
        intervals.set(start,intervals.get(end));
        intervals.set(end,tem);
    }
}
