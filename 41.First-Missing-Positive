/*
 Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space. 

*/

public class Solution {
    public int firstMissingPositive(List<Integer> nums) {
        int n=nums.size();
       
       
        for(int i=0;i<n;i++){
            int num=nums.get(i);
            if(num<=0||num>n||num==(i+1))
                continue;
            if(num!=nums.get(num-1))
            {
                swap(nums,num-1,i);
                i--;
            }
        }
        
        int i=0;
        for(;i<n;i++){
            if(nums.get(i)!=(i+1))
               break;
        }
        return i+1;
    }
    public void swap(List<Integer> nums,int a,int b){
        int tem=nums.get(a);
        nums.set(a,nums.get(b));
        nums.set(b,tem);
    }
}
