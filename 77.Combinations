/*
 Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/

public class Solution {
   
    public List<List<Integer>> combine(int n, int k) {
         List<List<Integer>> rs=dp(1,n,k);
		return rs;
    }
    private static List<List<Integer>> dp(int start, int n, int k) {
		// TODO Auto-generated method stub
        List<List<Integer>> rs=new ArrayList<List<Integer>>();
        if(k==0)
			return rs;
        if(k==1){
        	for(int i=start;i<=n;i++)
        	{
        		List<Integer> tem=new LinkedList<Integer>();
        		tem.add(i);
        		rs.add(tem);
        	}
        	return rs;
        }
        if(k>(n-start+1))
			return rs;
		if(k==(n-start+1))
		{
			List<Integer> tem=new LinkedList<Integer>();
			for(int i=start;i<=n;i++)
				tem.add(i);
			rs.add(tem);
			return rs;
		}
		
		for(int i=start;i<=(n-k+1);i++){
			List<List<Integer>> tem=dp(i+1,n,k-1);
			for(List<Integer> tems:tem){
				tems.add(0,i);
				rs.add(tems);
			}
		}
		return rs;
	}
}
