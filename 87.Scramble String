/*
 Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t

To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t

We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a

We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. 

*/


public class Solution {
    public boolean isScramble(String s1, String s2) {
        int n1=s1.length();
        HashMap<String,Boolean> hs=new HashMap<String,Boolean>();
        if(n1!=s2.length())
           return false;
        return recur(s1,0,n1-1,s2,0,n1-1,hs);
    }
    public boolean recur(String s1,int f1,int t1,String s2,int f2,int t2,HashMap<String,Boolean> hs){
        if((t1-f1)!=(t2-f2))
           return false;
        String key=""+f1+t1+f2+t2;
        if(hs.containsKey(key))
           return hs.get(key);
        if(t1==f1)
        {
            if(s1.charAt(f1)==s2.charAt(f2)){
                hs.put(key,true);
                return true;
            }
            else{
                hs.put(key,false);
                return false;
            }
        }
        int n=t1-f1+1;
        for(int i=1;i<n;i++){
                if((recur(s1,f1,f1+i-1,s2,f2,f2+i-1,hs)&&recur(s1,f1+i,t1,s2,f2+i,t2,hs))||
                    (recur(s1,f1,f1+i-1,s2,t2-i+1,t2,hs)&&recur(s1,f1+i,t1,s2,f2,t2-i,hs)))  
                {
                  hs.put(key,true);
                  return true;
                }
        }
        hs.put(key,false);
        return false;
    }
}
