/*
 Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself 
can be changed. 

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if((head==null)||(head.next==null))
           return head;
        ListNode  p1,p2,p3,p4,p5;
        p1=head.next;
        p2=p1.next;
        p1.next=head;
        head.next=p2;
        p5=head;
        while(p2!=null&&p2.next!=null){
            p3=p2.next;
            p4=p3.next;
            p5.next=p3;
            p5=p2;
            p3.next=p2;
            p2.next=p4;
            p2=p4;
            
        }
        
        
        return p1;
            
        
    }
}
