/*
Given a string containing only digits, restore it by returning all possible valid IP address combinations.

For example:
Given "25525511135",

return ["255.255.11.135", "255.255.111.35"]. (Order does not matter) 
*/

public class Solution {
    public List<String> restoreIpAddresses(String s) {
        int n=s.length();
        StringBuilder sb=new StringBuilder();
        List<String> rs=new ArrayList<String>();
        recur(s,0,n-1,sb,rs,4);
        return rs;
    }
    public void recur(String s,int start,int end,StringBuilder sb,List<String> rs,int num){
        if(start>end)
           return;
        int now=0;
        if(num==1){
            if(end-start>2)
               return;
            now=Integer.parseInt(s.substring(start,end+1));
	       if((now>=0&&now<=9&&end==start)||(now>=10&&now<=99&&(end-start)==1)
	           ||(now>=100&&now<=255&&(end-start)==2)){
	                sb.append(now);
	                rs.add(sb.toString());
	                int len=sb.length();
	                sb.delete(len-(end-start+1),len);
	            }
	            return;
        }
        now=Integer.parseInt(s.substring(start,start+1));
        sb.append(now);
        sb.append(".");
        recur(s,start+1,end,sb,rs,num-1);
        int len=sb.length();
        sb.delete(len-2,len);
        if((end-start)>=1){
            now=Integer.parseInt(s.substring(start,start+2));
             if(now>=10&&now<=99){
	              sb.append(now);
	              sb.append(".");
	              recur(s,start+2,end,sb,rs,num-1);
	              int len1=sb.length();
	              sb.delete(len1-3,len1);
	            }
        }
        if((end-start)>=2){
            now=Integer.parseInt(s.substring(start,start+3));
            if(now>=100&&now<=255){
                sb.append(now);
                sb.append(".");
                recur(s,start+3,end,sb,rs,num-1);
                int len2=sb.length();
                sb.delete(len2-4,len2);
            }
        }
       
    }
}
