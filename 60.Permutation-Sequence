/*
The set [1,2,3,â€¦,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

    "123"
    "132"
    "213"
    "231"
    "312"
    "321"

Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.
*/

public class Solution {
    public String getPermutation(int n, int k) {
        if(n==1)
          return "1";
        boolean[] flag=new boolean[n];
        for(int i=0;i<n;i++)
           flag[i]=true;
        int sum=jiecheng(n-1);
        StringBuilder sb=new StringBuilder();
        recur(sb,sum,flag,n,k);
        return sb.toString();
    }
     public void recur(StringBuilder sb,int sum,boolean[] flag,int n,int k){
        if(n==1){
            sb.append(find(flag,1));
            return;
        }
        int t=k/sum;
        k%=sum;
        if(k!=0)
           t++;
        else
           k+=sum;
        sum/=(n-1);
        sb.append(find(flag,t));
        n--;
        recur(sb,sum,flag,n,k);
        
    }
    public int jiecheng(int n){
        if(n==1)
            return 1;
        if(n==0)
            return 1;
        return n*jiecheng(n-1);
    }
    public int find(boolean[] flag,int n){
        for(int i=0;i<flag.length;i++){
            if(flag[i])
               n--;
            if(n==0){
                flag[i]=false;
                return (i+1);
            }
        }
        return 0;
    }
}
