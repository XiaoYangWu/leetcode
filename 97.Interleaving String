/*
 Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false. 
*/

public class Solution {
    public HashMap<String,Boolean> rs=new HashMap<String,Boolean>();
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3.length()==0)
          return s2.length()==0&&s1.length()==0;
        return recur(s1,0,s2,0,s3,0);
    }
    public boolean recur(String s1,int t1,String s2,int t2,String s3,int t3){
        String key=""+t1+"+"+t2+"+"+t3;
        if(rs.containsKey(key))
           return rs.get(key);
        int n1=s1.length()-1;
        int n2=s2.length()-1;
        int n3=s3.length()-1;
        if(t3==n3){
            int surplus=0;
            if(t1<=n1)
              surplus+=(n1-t1+1);
            if(t2<=n2)
              surplus+=(n2-t2+1);
            if(surplus!=1)
            {
                rs.put(key,false);
                return false;
            }
            boolean tem=false;
            if(t1==n1)
               tem=(s3.charAt(t3)==s1.charAt(t1));
            else if(t2==n2)   
               tem=(s3.charAt(t3)==s2.charAt(t2));
           rs.put(key,tem);
           return tem;
        }
        char c3=s3.charAt(t3);
        boolean b1=false,b2=false;
        boolean tem=false;
        if(t1<=n1&&c3==s1.charAt(t1))
            b1=true;
        if(t2<=n2&&c3==s2.charAt(t2))
            b2=true;
        if(b1&&b2)
            tem=recur(s1,t1+1,s2,t2,s3,t3+1)||recur(s1,t1,s2,t2+1,s3,t3+1);
        else if(b1)
           tem=recur(s1,t1+1,s2,t2,s3,t3+1);
        else if(b2)
           tem=recur(s1,t1,s2,t2+1,s3,t3+1);
        else
            tem=false;
         rs.put(key,tem);
         return tem;
        
        
    }
}
