/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]

*/


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rs=new ArrayList<List<Integer>>();
        if(root==null)
           return rs;
        List<Integer> tem=new ArrayList<Integer>();
        Queue<TreeNode> q1=new LinkedList<TreeNode>();
        Queue<Integer> q2=new LinkedList<Integer>();
        Stack<List<Integer>> st=new Stack<List<Integer>>();
        q1.offer(root);
        q2.offer(1);
        while(!q1.isEmpty()){
            TreeNode tems=q1.poll();
            int ceil=q2.poll();
            if(tems.left!=null)
            {
                q1.offer(tems.left);
                q2.offer(ceil+1);
            }
            if(tems.right!=null){
                q1.offer(tems.right);
                q2.offer(ceil+1);
            }
            tem.add(tems.val);
            if(q2.isEmpty()||q2.peek()!=ceil)
            {
                st.push(tem);
                tem=new ArrayList<Integer>();
            }
        }
        while(!st.isEmpty())
           rs.add(st.pop());
        return rs;
    }
}
