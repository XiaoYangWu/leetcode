/*
Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n==0)
         {
             List<TreeNode> rs=new ArrayList<TreeNode>();
             rs.add(null);
             return rs;
         }
        List[][] cache=new List[n+2][n+2];
        recur(1,n,cache);
        return cache[1][n];
    }
    public void recur(int start,int end,List<TreeNode>[][] cache){
        if(start>end)
            return; 
        if(cache[start][end]!=null)
           return;
        List<TreeNode> rs=new ArrayList<TreeNode>();
        cache[start][end]=rs;
        for(int i=start;i<=end;i++){
            recur(start,i-1,cache);
            recur(i+1,end,cache);
            if(cache[start][i-1]==null&&cache[i+1][end]==null){
                rs.add(new TreeNode(i));
            }
            else if(cache[start][i-1]==null){
                for(TreeNode right:cache[i+1][end]){
                    TreeNode root=new TreeNode(i);
                    root.right=right;
                    rs.add(root);
                }
            }
            else if(cache[i+1][end]==null){
                 for(TreeNode left:cache[start][i-1]){
                    TreeNode root=new TreeNode(i);
                    root.left=left;
                    rs.add(root);
                }
            }
            else{
            for(TreeNode left:cache[start][i-1])
               for(TreeNode  right:cache[i+1][end])
               {
                   TreeNode root=new TreeNode(i);
                   root.left=left;
                   root.right=right;
                   rs.add(root);
               }
            }
        }
    }
}
