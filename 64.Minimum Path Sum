/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
*/

public class Solution {
    public int minPathSum(int[][] grid) {
         int m=grid.length;
      int n=grid[0].length;
      int[][] rs=new int[m][n];
      for(int i=0;i<m;i++)
    	  for(int j=0;j<n;j++)
    		  rs[i][j]=-1;
      dp(grid,0,0,rs);
	   return rs[0][0];   
    }
    private static void dp(int[][] grid, int i, int j, int[][] rs) {
	// TODO Auto-generated method stub
		if(rs[i][j]!=-1)
			return;
		int m=grid.length;
	    int n=grid[0].length;
	    if(i==m-1&&j==n-1)
	    {
	    	rs[i][j]=grid[i][j];
	    	return;
	    }
	    if(i==m-1){
	    	dp(grid,i,j+1,rs);
	    	rs[i][j]=rs[i][j+1]+grid[i][j];
	    	return;
	    }
	    if(j==n-1){
	    	dp(grid,i+1,j,rs);
	    	rs[i][j]=rs[i+1][j]+grid[i][j];
	    	return;
	    }
	    dp(grid,i+1,j,rs);
	    dp(grid,i,j+1,rs);
	    if(rs[i+1][j]<rs[i][j+1])
	    	rs[i][j]=grid[i][j]+rs[i+1][j];
	    else
	    	rs[i][j]=grid[i][j]+rs[i][j+1];
	    return;
	    
		
		
    }
}
