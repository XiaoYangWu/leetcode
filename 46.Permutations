/*
 Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]. 

*/

public class Solution {
    public List<List<Integer>> permute(int[] num) {
         List con=new LinkedList<Integer>();
       //Collections.addAll(con,num);
        for(int i=0;i<num.length;i++){
        	con.add(num[i]);
        }
        List<List<Integer>> rs=process(con);
    	return rs;
    }
    private static List<List<Integer>> process(List<Integer> con) {
		// TODO Auto-generated method stub
		List<List<Integer>> rs=new LinkedList<List<Integer>>();
		if(con.size()==1)
		{
			List<Integer> ele=new LinkedList<Integer>();
			ele.add(con.get(0));
			rs.add(ele);
			return rs;
		}
		for(int i=0;i<con.size();i++){
		    int tar=con.get(i);
		    List<Integer> tem=new LinkedList<Integer>(con);
		    tem.remove(i);
		    List<List<Integer>> r1=process(tem);
		    for(List<Integer> r2:r1){
		    	r2.add(0,tar);
		    	rs.add(r2);
		    }
		}
		return rs;
	}
}
