/*
 Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]

word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/

class Pos{
    int row;
    int col;
    Pos(int row,int col){
        this.row=row;
        this.col=col;
    }
}
public class Solution {
    public boolean exist(char[][] board, String word) {
        int n=board.length;
        if(n==0)
           return false;
        int n2=board[0].length;
        int n3=word.length();
        if(n3==0)
           return true;
        boolean flag[][]=new boolean[n][n2];
        ArrayList<Pos> startPos=new ArrayList<Pos>();
        char start=word.charAt(0);
        for(int i=0;i<n;i++)
           for(int j=0;j<n2;j++)
               if(board[i][j]==start)
                 startPos.add(new Pos(i,j));
        for(Pos now:startPos){
            flag[now.row][now.col]=true;
            boolean rs=recur(board,now.row,now.col,word,0,flag);
            if(rs)
              return true;
            flag[now.row][now.col]=false;
        }
        return false;
               
    }
    public boolean recur(char[][] board,int row,int col,String word,int index,boolean[][] flag){
        int n1=board.length;
        int n2=board[0].length;
        int n3=word.length();
        if(index==n3-1)
           return true;
         boolean rs=false;
        if(row+1<n1&&board[row+1][col]==word.charAt(index+1)&&!flag[row+1][col])
         {
             flag[row+1][col]=true;
             rs=recur(board,row+1,col,word,index+1,flag);
             if(rs)
               return true;
             flag[row+1][col]=false;
         }
          if(row-1>=0&&board[row-1][col]==word.charAt(index+1)&&!flag[row-1][col])
         {
             flag[row-1][col]=true;
             rs=recur(board,row-1,col,word,index+1,flag);
             if(rs)
               return true;
             flag[row-1][col]=false;
         }
          if(col+1<n2&&board[row][col+1]==word.charAt(index+1)&&!flag[row][col+1])
         {
             flag[row][col+1]=true;
             rs=recur(board,row,col+1,word,index+1,flag);
             if(rs)
               return true;
             flag[row][col+1]=false;
         }
          if(col-1>=0&&board[row][col-1]==word.charAt(index+1)&&!flag[row][col-1])
         {
             flag[row][col-1]=true;
             rs=recur(board,row,col-1,word,index+1,flag);
             if(rs)
               return true;
             flag[row][col-1]=false;
         }
         return false;
        
    }
}
