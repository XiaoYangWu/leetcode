/*
 Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:

    Only one letter can be changed at a time
    Each intermediate word must exist in the dictionary

For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

    Return 0 if there is no such transformation sequence.
    All words have the same length.
    All words contain only lowercase alphabetic characters.


*/


//图的广度优先搜索
public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
           if(start.equals(end))
	           return 1;
	        if(isTransform(start,end))
	           return 2;
	        HashMap<String,Integer> hm=new HashMap<String,Integer>();
	        Queue<String> qe=new LinkedList<String>();
	        qe.offer(start);
	        hm.put(start,1);
	        while(!qe.isEmpty()){
	            String tem=qe.poll();
	            int count=hm.get(tem);
	            for(int i=0;i<tem.length();i++)
	                for(char j='a';j<='z';j++){
	                    if(tem.charAt(i)==j)
	                       continue;
	                    StringBuilder sb=new StringBuilder(tem);
	                    sb.setCharAt(i,j);
	                    String now=sb.toString();
	                    if(now.equals(end))
	                        return count+1;
	                    if(dict.contains(now)&&!hm.containsKey(now)){
	                        qe.offer(now);
	                        hm.put(now,count+1);
	                    }
	                }
	        }
	       
	        return 0;
    }
    public boolean isTransform(String a,String b){
        int n=a.length();
        if(n!=b.length())
           return false;
        int count=0;
        for(int i=0;i<n;i++)
           if(a.charAt(i)!=b.charAt(i))
               count++;
        return count==1;
    }
   
 
}
