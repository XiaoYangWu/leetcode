/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.
*/

public class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        if(n==0||n==1)
           return 0;
        int[] gap=new int[n-1];
        for(int i=0;i<n-1;i++)
        	gap[i]=prices[i+1]-prices[i];
        int[] left=new int[n+1];
        int[] right=new int[n+1];
        left[1]=gap[0];
        int max=gap[0];
        int tem=gap[0];
        for(int i=1;i<n-1;i++){
            if(tem<0)
              tem=0;
            tem+=gap[i];
            left[i+1]=Math.max(tem,left[i]);
        }
        right[n-1]=gap[n-2];
        max=tem=gap[n-2];
        for(int i=n-3;i>=0;i--){
            if(tem<0)
               tem=0;
            tem+=gap[i];
            right[i+1]=Math.max(tem,right[i+2]);
        }
        left[0]=right[n]=0;
        int rs=0;
        for(int i=0;i<n;i++){
            int t=left[i]+right[i+1];
            if(t>rs)
               rs=t;
        }
        return rs;
    }
   
}
