/*
 Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:

    All numbers (including target) will be positive integers.
    Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
    The solution set must not contain duplicate combinations.

For example, given candidate set 10,1,2,7,6,1,5 and target 8,
A solution set is:
[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6] 
*/

public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        Arrays.sort(num);
        List<List<Integer>> rs=new ArrayList<List<Integer>>();
        List<Integer> tem=new ArrayList<Integer>();
        HashSet<String> hs=new HashSet<String>();
        int n=num.length;
        if(n==0)
            return rs;
        int end=n-1;
        while(end>=0&&num[end]>target)
          end--;
        if(end==-1)
           return rs;
        recur(num,0,end,target,tem,rs,hs);
        return rs;
    }
    public void recur(int[] num,int start,int end,int target,List<Integer> tem,List<List<Integer>> rs,HashSet<String> hs){
        if(start>end)
           return;
        int val=num[start];
        tem.add(val);
        target-=val;
        if(target==0){
            StringBuilder sb=new StringBuilder();
            for(int i:tem)
              sb.append(i);
            String key=sb.toString();
            if(!hs.contains(key))
            {
                List<Integer> t=new ArrayList<Integer>(tem);
                hs.add(key);
                rs.add(t);
            }
        }
        if(target<=0){
            target+=val;
            tem.remove(tem.size()-1);
            return;
        }
        recur(num,start+1,end,target,tem,rs,hs);
        target+=val;
        tem.remove(tem.size()-1);
        recur(num,start+1,end,target,tem,rs,hs);
        
    }
}
