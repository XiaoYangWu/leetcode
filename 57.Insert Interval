/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10]
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if(newInterval==null)
           return intervals;
        if(intervals.size()==0)
        {
            intervals.add(newInterval);
            return intervals;
        }
        List<Interval> rs=new ArrayList<Interval>();
        boolean flag=false;
        for(Interval tem:intervals){
           if(!flag){
                int rss=isOverlap(tem,newInterval);
                if(rss==0)
                    continue;
                else if(rss==-1) 
                {
                    rs.add(newInterval);
                    flag=true;
                }
           }
           rs.add(tem);
        }
        if(!flag)
           rs.add(newInterval);
        return rs;
    }
    public int isOverlap(Interval tem,Interval now){
        if(now.end<tem.start)
            return -1;
        if(now.start>tem.end)
            return 1;
        
        now.start=Math.min(now.start,tem.start);
        now.end=Math.max(now.end,tem.end);
        return 0;
    }
}
