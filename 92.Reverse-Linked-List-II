/*
 Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null||m==n||head.next==null)
           return head;
        ListNode before,now,after,afters,start,end;
        int count=1;
        ListNode tem=new ListNode(-1);
        tem.next=head;
        before=tem;
        now=head;
        while(count!=m){
            before=now;
            now=now.next;
            count++;
        }
        start=now;
        after=now.next;
        afters=after.next;
        while(count!=n){
            after.next=now;
            now=after;
            after=afters;
            if(afters!=null)
               afters=afters.next;
            count++;
        }
        end=now;
        before.next=end;
        start.next=after;
        return tem.next;
        
    }
}
