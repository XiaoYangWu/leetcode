/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity. 

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if(lists.size()==0)
           return null;
        if(lists.size()==1)
           return lists.get(0);
        Iterator<ListNode> it=lists.iterator();
        List<ListNode> rs=new ArrayList<ListNode>();
        while(it.hasNext()){
            ListNode p1=it.next();
            if(it.hasNext())
            {
                ListNode p2=it.next();
                rs.add(merge(p1,p2));
            }
            else
               rs.add(p1);
        }
        return mergeKLists(rs);
    }
     public ListNode merge(ListNode p1,ListNode p2){
         if(p1==null)
            return p2;
        if(p2==null)
            return p1;
        ListNode head=null,tail=null;
        if(p1.val<p2.val){
            head=p1;
            p1=p1.next;
        }
        else{
            head=p2;
            p2=p2.next;
        }
        tail=head;
        while(p1!=null&&p2!=null){
            if(p1.val<p2.val){
              tail.next=p1;
              p1=p1.next;
          }
           else{
            tail.next=p2;
            p2=p2.next;
          }
           tail=tail.next;
        }
        if(p1!=null)
           tail.next=p1;
        else
           tail.next=p2;
        return head;
    }
    
}
