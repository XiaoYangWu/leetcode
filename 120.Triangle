/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11). 
*/

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int[] rs=new int[n];
        for(int i=n-1;i>=0;i--)
           for(int j=0;j<=i;j++){
               rs[j]=triangle.get(i).get(j)+Math.min(rs[j],j==n-1?0:rs[j+1]);
           }
         return rs[0];
    }
}
